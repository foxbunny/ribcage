// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case './base':
          return _this.ribcage.models.baseModel;
        case '../utils/localstorage':
          return _this.ribcage.utils.LocalStorage;
        case '../utils/localstore':
          return _this.ribcage.utils.LocalStore;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var module;
    module = _this.ribcage.models.localStorageModel = factory(_this.require);
    _this.ribcage.models.LocalStorageModel = module.Model;
    return _this.ribcage.modelMixins.LocalStorageModel = module.mixin;
  };
}

define(function(require) {
  var LocalStorage, LocalStorageModel, LocalStore, baseModel, localStorageModelMixin, storage;
  baseModel = require('./base');
  LocalStorage = require('../utils/localstorage');
  LocalStore = require('../utils/localstore');
  storage = new LocalStorage();
  localStorageModelMixin = {
    store: null,
    storageKey: null,
    persistent: true,
    initialize: function() {
      return this.store = new LocalStore(this.storageKey, storage, this.idProperty);
    },
    sync: function(method, model, options) {
      var alterMethods, dataMethods, methodMap, url;
      if (options == null) {
        options = {};
      }
      methodMap = {
        read: 'GET',
        create: 'POST',
        update: 'PUT',
        patch: 'PATCH',
        "delete": 'DELETE'
      };
      if (options.forceCreate && method === 'update') {
        method = 'create';
        options.noFail = true;
      }
      dataMethods = ['create', 'update', 'patch'];
      alterMethods = dataMethods.concat(['delete']);
      if (!this.persistent && __indexOf.call(alterMethods, method) >= 0) {
        options.success(model.attributes);
      }
      if (__indexOf.call(dataMethods, method) >= 0) {
        options.data = model ? model.attributes || null : void 0;
      }
      options.success || (options.success = function() {});
      options.error || (options.error = function() {});
      url = options.url = model.id || null;
      options.type = methodMap[method];
      return this.store.query(url, options);
    },
    destroy: function() {
      return this.sync('delete', this);
    },
    makePersistent: function() {
      this.persistent = true;
      return this.save();
    },
    unpersist: function() {
      this.persistent = false;
      return this.store.destroyStore();
    }
  };
  LocalStorageModel = baseModel.Model.extend(localStorageModelMixin);
  return {
    mixin: localStorageModelMixin,
    Model: LocalStorageModel
  };
});
