# <a name="baserouter">BaseRouter</a>

This is a basic router that handles the most traditional case of routing
different routes to matching handlers.

Apart from standard Backbone router, this router also adds hooks for view
registration and cleanup.

This module is in UMD format and will create `ribcage.routers.simpleRouter`,
`ribcage.routers.SimpleRouter`, and `ribcage.routerMixins.SimpleRouter` globals
if not used with an AMD loader such as RequireJS.

This module depends on DaHelpers and Backbone.

 + [`baseRouterMixin`](#baseroutermixin)
   - [`#_activeViews`](#activeviews)
   - [`#autoCleanup`](#autocleanup)
   - [`#init(jQuery)`](#init-jquery)
   - [`#initialize(settings)`](#initialize-settings)
   - [`#giveAccess(view)`](#giveaccess-view)
   - [`#register(view)`](#register-view)
   - [`#cleanup()`](#cleanup)
   - [`#back()`](#back)
   - [`#start()`](#start)
 + [`BaseRouter`](#baserouter)


## <a name="baseroutermixin">`baseRouterMixin`</a>

This mixin implements the API of the `BaseRouter`.

### <a name="activeviews">`#_activeViews`</a>

An array containing currently registered views.

### <a name="autocleanup">`#autoCleanup`</a>

Whether cleanup should be performed automatically. Default is `false`.

### <a name="init-jquery">`#init(jQuery)`</a>

Called when router is starting. Use this to perform initialization. jQuery is
passed to init for convenience.

Default implementation does not do anything.

### <a name="initialize-settings">`#initialize(settings)`</a>

During initialization, router sets up event handlers and calls the `#init()`
method. You generally don't want to overload this method. Instead, use
`#init()`.

The settings may include an `autoCleanup` key which will override the
`#autoCleanup` property given a non-null value.

### <a name="giveaccess-view">`#giveAccess(view)`</a>

During view registration, this method is called to give the view access to
anything that view may need.

The default implementation is rather liberal and simply adds a `router`
attribute to the view which points to this router object. This gives views full
access to the router, but the tradeoff is that it has more access than usually
needed.

You should generally consider overloading this method to give views just enough
access to get the job done.

### <a name="register-view">`#register(view)`</a>

Registers a view object as active view.

This method can be used to register your views. All registered views can be
accessed by the router to perform such tasks as cleanup when changing routes.

### <a name="cleanup">`#cleanup()`</a>

Cleans up all registered views. Returns the router instance for chaining. You
should generally call this whenever you are setting up a blank page from
scratch.

If the view implements a `#cleanup()` method, it will be called. You do not
need to call view's `#remove()` method since that will be taken care of by the
router's cleanup.

Model cleanup Collection cleanup ### `#go(hash)`

Simple wrapper for Router.navigate that also passes `{trigger: true}`.

### <a name="back">`#back()`</a>

Simple alias for `window.history.back()`.

### <a name="start">`#start()`</a>

Shortcut for `Backbone.history.start()`. Any arguments are passed to
`Backbone.history.start()` method.

## <a name="baserouter">`BaseRouter`</a>

Please see the documentation on [`simpleRouterMixin`](#simpleroutermixin) for
more information about this router's API.