# <a name="ribcage">Ribcage</a>

This module is a one-stop-shop for all the Ribcage modules. It imports all
modules in the `ribcage` directory and makes them available through a single
object. If you only need to access parts of the Ribcage library, you should
instead manually require individual modules.

This module (main module) acts as namespace creator when not used with an AMD
loader such as RequireJS. Please load it _before_ any other Ribcage modules.

 + [Models](#models)
 + [Collections](#collections)
 + [Views](#views)
 + [Routers](#routers)
 + [Model mixins](#model-mixins)
 + [Collection mixins](#collection-mixins)
 + [View mixins](#view-mixins)
 + [Router mixins](#router-mixins)
 + [Validators](#validators)
 + [Utilities](#utilities)


## <a name="models">Models</a>

The models are accessible through the `ribcage.models` object. There are two
models that you can use:

 + [`BaseModel`](models/base.mkd) - Provides the base mode functionality
   common to all Ribcage models (currently same as stock Backbone model).
 + [`LocalStorageModel`](models/localstorage.mkd) - Uses the browser's
  `localStorage` API to persist the model data


## <a name="collections">Collections</a>

The `ribcage.collections` object exposes the Ribcage collections. These are the
available collections:

 + [`BaseCollection`](collections/base.mkd) - Base collection functionality
   for all Ribcage collections.


## <a name="views">Views</a>

All view constructors are accessible through the `ribcage.views` object. These
include:

 + [`BaseView`](views/base.mkd) - A view that provides the base
   functionality of all Ribcage views
 + [`FormErrorView`](views/formerror.mkd) - Provides hooks for displaying
   and clearing form error messages
 + [`FormExtraView`](views/formextra.mkd) - Provides utitlities for
   manipulating form behavior.
 + [`BaseFormView`](views/form.mkd) - Provides
   basic form manipulation and error handling
 + [`ModelFormView`](views/modelform.mkd) - Provides model-specific form
   behavior such as data-binding
 + [`CreateView`](views/create.mkd) - Simplifies creation of new model
   instances server-side
 + [`CollectionCreateView`](views/collectioncreate.mkd) - Create view that
   uses the collection object to crate a new model.
 + [`TempalteBaseView`](views/templatebase.mkd) - Base template view that
   provides basic template-handling and nothing else
 + [`TemplateView`](views/template.mkd) - Simplifies rendering of templates
 + [`ModalView`](views/modal.mkd) - Modal dialog view
 + [`ModelView`](views/model.mkd) - Augments `TemplateView` by passing
   model data to templates
 + [`RedirectView`](views/redirect.mkd) - Simply redirects to a specified
   path
 + [`LoadingView`](views/loading.mkd) - Displays an AJAX loading spinner
 + [`TabbedView`](views/tabbed.mkd) - Subview container with tabbed
   navigation.


## <a name="routers">Routers</a>

All router constructors are accessible thorugh `ribcage.routers` object. These
include:

 + [`BaseRouter`](routers/base.mkd) - A simple router with view
   registration and cleanup logic.
 + [`StatefulRouter`](routers/stateful.mkd) - Router that adds support for
   application state persistence using localStorage API
 + [`DeviceRouter`](routers/device.mkd) - Router that specializes in the
   evil art of device detection


## <a name="model-mixins">Model mixins</a>

The `ribcage.modelMixins` object provides access to model mixins. These mixins
implement the APIs for matching models, and allow you to easily add their
features to other models in your application.

## <a name="collection-mixins">Collection mixins</a>

The `ribcage.collectionMixins` object contains collection mixins. These mixins
implement the APIs of matching collections, and you can use them to add their
features to your own collections.

## <a name="view-mixins">View mixins</a>

The `ribcage.viewMixins` object provides access to view mixins. The mixins
implement the core APIs for all of the views, and mixins allow you to combine
such functionality with your own custom views.

## <a name="router-mixins">Router mixins</a>

The `ribcage.routerMixins` object contains router mixins. The mixins implement
the base APIs for respective Ribcage routers. You can use them to create your
own routers with features from different built-in routers.

## <a name="validators">Validators</a>

The validation tools are accessible through `ribcage.validators` object. The
object contains validation methods (functions that perform validation), and two
[validator mixins](validators/mixins.mkd):

 + `ValidatingMixin` - Generic mixin that can be used on views.
 + `ModelValidatingMixin` - A mixin specific to models.


Note that validation methods can also be used to clean up and format your data
since they return the data in the format that validator expect it to be in. For
example, a `numeric` validator will return a number, regardless of the input
value, if the input value can be successfully converted to a number.

## <a name="utilities">Utilities</a>

The `ribcage.utils` object gives you access to utility methods. Those are:

 + [`serializeObject`](utils/serializeobject.mkd) - Serializes form data
   into an object
 + [`deserializeForm`](utils/deserializeform.mkd) - Deserializes an object
   into a form (fills in the form)
 + [`randString`](utils/randstring.mkd) - Random string generator
 + [`LocalStorage`](utils/localstorage.mkd) - Wrapper for localStorage API
 + [`LocalStore`](utils/localstore.mkd) - REST-like interface for
   localStorage API that provides `jQuery.ajax`-compatible interface


