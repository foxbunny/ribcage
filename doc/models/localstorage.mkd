# <a name="local-storage-model">Local storage model</a>

Model with localStorage support.

This model is in UMD format, and will create a
`ribcage.models.localStorageModel`, `ribcage.models.LocalStorageModel`, and
`ribcage.modelMixins.LocalStorageModel` globals if not used with an AMD loader
such as RequireJS.

This model depends on `ribcage/models/base`, `ribcage/utils/localstore`, and
`ribcage/utils/localstorage` modules.

The `LocalStorageModel` model uses  `LocalStorage` utiltiy class as an
abstraction layer for `localStorage` API.

 + [`localStorageModelmixin`](#localstoragemodelmixin)
   - [`#store`](#store)
   - [`#storageKey`](#storagekey)
   - [`#persistent`](#persistent)
   - [`#initialize()`](#initialize)
   - [`#sync(method, model, options)`](#sync-method-model-options)
   - [`#makePersistent()`](#makepersistent)
   - [`#unpersist()`](#unpersist)
 + [`LocalStorageModel`](#localstoragemodel)
 + [Exports](#exports)


## <a name="localstoragemodelmixin">`localStorageModelmixin`</a>

This mixin implements the API of the `LocalStorageModel`.

### <a name="store">`#store`</a>

The storage object is accessible through the storage property. It will be
initialized when model is initialized, so overriding this property does
nothing.

### <a name="storagekey">`#storageKey`</a>

The `localStorage` key for this model.

### <a name="persistent">`#persistent`</a>

A flag that tells the model to persist its data in the storage when `#sync()`
is called. If this flag is set to `false`, syncing will be disabled for all
operations except reads.

### <a name="initialize">`#initialize()`</a>

It is extremely important to remember not to overload this method, or to call
the original one if you are overloading it. This method sets up a store that
will handle all the communication between the model and localStorage.

Here is a proper way to overload this method should you need to do so:

    var MyLocalStorageModel = LocalStorageModel.extend({
      initialize: function() {
        // Do your thing
        LocalStorageModel.prototype.initialize.call this
      }
    });


And same in CoffeeScript:

    MyLocalStorageModel = LocalStorageModel.extend
      initialize: () ->
        # Do your thing
        LocalStorageModel::initialize.call this


For more information on the low-level API of the store, look at the
documentation for `ribcage.utils.LocalStore`.

### <a name="sync-method-model-options">`#sync(method, model, options)`</a>

This is a customized version of `Backbone.sync()` which stores the data in the
localStorage. Internally, it communicates with the `#store` object.

The options object can can be passed with `forceCreate` option which
essentially allows the `update` method to be converted to a `create` if the
object already exists. This can be used to create objects where the ID has to
be known in advance, or when you want to create an object 'just in case' it
doesn't already exist.

Add dummy callbacks if option is not specified ### `#destroy()`

Rewires the call to `#sync()` so it doesn't matter whether the object has an ID
or not (it doesn't matter whether it is new).

Note that the current implementation does not trigger any events. This will be
fixed in future releases.

### <a name="makepersistent">`#makePersistent()`</a>

Makes the model persistent by setting its `#persistent` flag, and saving it
immediately afterwards.

Note that calling this method does _not_ trigger the 'change' event.

### <a name="unpersist">`#unpersist()`</a>

Makes the model non-persistent by setting its `#persistent` flag to `false`,
and by removing the entire store (along with any previously stored data).

Note that calling this method does _not_ trigger the 'change' event.

## <a name="localstoragemodel">`LocalStorageModel`</a>

Please see the documentation on the
[`localStorageModelMixin`](#localstoragemodelmixin) for more information about
this model's API.

## <a name="exports">Exports</a>

This module exports `mixin` and `Model` properties.