# <a name="local-storage-interface">Local storage interface</a>

This is a simple `localStorage` API interface that falls back on memory
storage.

This module is in UMD format and will return a `ribcage.utils.LocalStorage`
global if not used with an AMD loader such as RequireJS.

This module has no external dependencies.

 + [`LocalStorage`](#localstorage)
   - [`#getItem(key, [raw])](#getitem-key-raw)
   - [`#setItem(key, value, [raw])`](#setitem-key-value-raw)
   - [`#removeItem(key)`](#removeitem-key)
 + [Exports](#exports)


## <a name="localstorage">`LocalStorage`</a>

This constructor implements the `localStorage` API that wraps around native
`localStorage` object with fallback on in-memory storage. It implements only a
subset of the localStorage API needed for use in Ribcage.

The constructor takes a single boolean `debug` argument that tells the object
whether to log its actions. It currently has no effect.

All data is internally stored as JSON and deserialized on retrieval.

Example:

    var ls = new LocalStorage();
    ls.setItem('foo', {a: 12, b: 'bar'});
    ls.getItem('foo');        // returns {a: 12, b: 'bar'}
    ls.getItem('foo', true);  // returns '{"a": 12, "b": "bar"}'


### <a name="getitem-key-raw">`#getItem(key, [raw])</a>

Gets data with given key.

The `raw` argument is a boolean and data is returned raw without
deserialization if it's set to `true`.

### <a name="setitem-key-value-raw">`#setItem(key, value, [raw])`</a>

Sets `val` as data for given key.

The `raw` argument is a boolean and data is set raw without serialization if
it's set to `true`.

### <a name="removeitem-key">`#removeItem(key)`</a>

Removes data with given key from local storage.

## <a name="exports">Exports</a>

This module exports the `LocalStorage` constructor.