# REST interface for localStorage <a name="rest-interface-for-localstorage"></a>

This module implements a `LocalStore` constructor which provides an API similar
to, and mostly compatible with `jQuery.ajax`.

This module is in UMD format and will create a `ribcage.utils.LocalStore`
global if not used with an AMD loader such as RequireJS.

This module depends on DaHelpers, `ribcage.utils.LocalStorage`, and
`ribcage.utils.randString`.

 + [`LocalStore(key, storage, [idProperty])`](#localstore-key-storage-idproperty)
   - [`#getStore()`](#getstore)
   - [`#setRestorePoint()`](#setrestorepoint)
   - [`#clearRestorePoint()`](#clearrestorepoint)
   - [`#restore()`](#restore)
   - [`#destroyStore()`](#destroystore)
   - [`#getAll()`](#getall)
   - [`#idIsUnique(id)`](#idisunique-id)
   - [`#addItem(item)`](#additem-item)
   - [`#removeItem(idx)`](#removeitem-idx)
   - [`#updateItem(idx, data)`](#updateitem-idx-data)
   - [`#patchItem(idx, data)`](#patchitem-idx-data)
   - [`#getIndexOf(id)`](#getindexof-id)
   - [`#getIndexSafe(id)`](#getindexsafe-id)
   - [`#getOne(id)](#getone-id)
   - [`#createOne(data, noFail)`](#createone-data-nofail)
   - [`#createAll(data)`](#createall-data)
   - [`#updateOne(id, data)`](#updateone-id-data)
   - [`#updateAll(data)`](#updateall-data)
   - [`#patchOne(id, data)`](#patchone-id-data)
   - [`#patchAll(data)`](#patchall-data)
   - [`#deleteOne(id)`](#deleteone-id)
   - [`#deleteAll([ids])`](#deleteall-ids)
   - [`#GET(id)`](#get-id)
   - [`#PUT(id, data)`](#put-id-data)
   - [`#POST(id, data, noFail)`](#post-id-data-nofail)
   - [`#PATCH(id, data)`](#patch-id-data)
   - [`#DELETE(id, data)`](#delete-id-data)
   - [`#query(url, settings)`](#query-url-settings)
 + [Exports](#exports)


## `LocalStore(key, storage, [idProperty])` <a name="localstore-key-storage-idproperty"></a>

The store is initialized with `key` to be used to store the data, `idProperty`
to be used to look up object's ID, and `storage` which is an object that
implements localStorage API.

`storage` can be `window.localStorage`, but we use `LocalStorage` constructor
by default.

Internally all data is stored under the specified key as an object with two
properties:

    {
      data: [...],
      index: {...}
    }


The index is a simple look-up table that maps IDs to array indices. The index
is used to look up objects by ID, while the actual data is stored in the data
array.

All operations are atomic, meaning that operations over multiple items at once
will be committed for each item. Because the operations can sometimes fail, the
state of the storage before the bulk operation had started is backed up and
then restored if exceptions are thrown. While this works well when access to
localStorage is serial (meaning only one instance is being accessed at any
given time), it has a high probability of causing all kinds of problems when
accessed in multiple 'threads'.

You should keep in mind that this is not a proper database server, and does not
have the robustness or guarantees that proper databases provide.

### `#getStore()` <a name="getstore"></a>

Returns the store object with `data` and `index` keys. New one is returned if
the key does not contain one yet.

### `#setRestorePoint()` <a name="setrestorepoint"></a>

Saves the current state of the localStorage key in `#restorePoint` property.

### `#clearRestorePoint()` <a name="clearrestorepoint"></a>

Removes the saved localStorage state.

### `#restore()` <a name="restore"></a>

Restores saved localStorage state from `#restorePoint` to localStorage.

### `#destroyStore()` <a name="destroystore"></a>

Removes all data from localStorage.

### `#getAll()` <a name="getall"></a>

Returns all data.

### `#idIsUnique(id)` <a name="idisunique-id"></a>

Returns `true` if `id` is not found in the index.

### `#addItem(item)` <a name="additem-item"></a>

Adds a single item to the store and updates the index.

### `#removeItem(idx)` <a name="removeitem-idx"></a>

Removes an item with array index of `idx` and updates the index.

### `#updateItem(idx, data)` <a name="updateitem-idx-data"></a>

Updates an item with array index of `idx` with `data`. Existing keys are
overwritten or removed if not present in the `data` object.

### `#patchItem(idx, data)` <a name="patchitem-idx-data"></a>

Patches a single item using `data` object. The existing keys that do not exist
in `data` are retained.

### `#getIndexOf(id)` <a name="getindexof-id"></a>

Returns the index of an item with an ID of `id`.

### `#getIndexSafe(id)` <a name="getindexsafe-id"></a>

Wraps around `#getIndexOf()` and throws an exception if the `id` does not exist
in the index.

### `#getOne(id) <a name="getone-id"></a>

Return an item with the ID of `id`. If no such item is found, an exception is
thrown.

### `#createOne(data, noFail)` <a name="createone-data-nofail"></a>

Create a single item and return its data. If the `data` contains a valid ID,
and the ID is not unique (it already exists in the index) an exception is
thrown.

If no ID is specified in `data`, a random ID is created. The generated ID is a
20-digit hexadecimal number.

If the `noFail` argument is `true`, and the ID of the new object is not unique,
the existing object is returned instead of throwing an exception.

The `noFail` argument is generally used to create a model where id has to be
known in advance, and existing data can be used instead of the specified data
if object had been crated before.

### `#createAll(data)` <a name="createall-data"></a>

If passed an array of items to create, it will create them one by one. It rolls
back the changes if any of the items fail to create.

The `noFail` argument can be passed, and works the same way as in
[`#createOne()`](#createone-data-nofail).

If an exception is thrown during creation, the storage will be rolled back to
the state before creation of the first item.

### `#updateOne(id, data)` <a name="updateone-id-data"></a>

Updates an item with an ID of `id` using `data`. If the `id` does not exist, an
exception will be thrown.

### `#updateAll(data)` <a name="updateall-data"></a>

Takes an array of item data and updates each item. It is assumed that data for
each item also contains the item's ID.

The store will be rolled back if an item fails to update.

### `#patchOne(id, data)` <a name="patchone-id-data"></a>

Patches an item with ID of `id` using `data`. If the `id` is not found in the
index, an exception is thrown.

### `#patchAll(data)` <a name="patchall-data"></a>

Patches multiple items using an array of `data`. It is assumed that each item
in the `data` array contains the ID of the item.

If an exception is thrown during patching, the storage will be rolled back to
the state before patching of the first item.

### `#deleteOne(id)` <a name="deleteone-id"></a>

Deletes an item with an ID of `id`. An exception will be thrown if the `id` is
not found in the index.

### `#deleteAll([ids])` <a name="deleteall-ids"></a>

Deletes multiple items, or clears the store. The optional `ids` argument should
be an array of IDs. If not specified, the store is cleared.

If IDs are specified, each item with matching ID is removed. If an item fails
to delete, the store will be rolled back.

### `#GET(id)` <a name="get-id"></a>

Handles the pretend GET request.

If no `id` is specified, all data is returned. Otherwise, only an item with
matching `id` will be returned.

### `#PUT(id, data)` <a name="put-id-data"></a>

Handles the pretend PUT request.

If `id` is specified, a single object is patched. Otherwise, `data` will be
treated as an array, and each array item will be expected to contain the ID.

### `#POST(id, data, noFail)` <a name="post-id-data-nofail"></a>

Handles the pretend POST request.

The `id` parameter is disregarded. It exists simply to provide an uniform
signature across all methods.

`data` can either be an object or an array. If an array is specified, multiple
objects will be created.

The `noFail` flag works the same way as in
[`#createOne()`](#createone-data-nofail) method.

### `#PATCH(id, data)` <a name="patch-id-data"></a>

Handles the pretend PATCH request.

If `id` is specified, a single object is patched. Otherwise, `data` will be
treated as an array, and each array item will be expected to contain the ID.

### `#DELETE(id, data)` <a name="delete-id-data"></a>

Handles the pretend DELETE request.

If `id` is specified, a single object is patched. Otherwise, `data` will be
treated as an array, and each array item will be expected to contain the ID.

### `#query(url, settings)` <a name="query-url-settings"></a>

jQuery.ajax-compatible API for `LocalStorage`.

The URL of the request is used as the ID. You can set it to `null` to operate
on the whole collection.

The settings accepted by `#query()` are following:

 + `data` - Request data
 + `type` - Request method (GET, POST, PUT, PATCH, DELETE)
 + `noFail` - Whether to fail silently on POST if record exists
 + `error` - Error callback
 + `success` - Success callback


`noFail` is a non-standard argument that essentially turns POST into a GET if
record already exists. Note that it does not try to update any data, and does
not trigger any errors. You will not be able to programmatically determine if
the record has been created or retrieved simply by looking at the response.

Error callback takes a single argument which is the error message.

The success callback takes a single argument which is usually the data that has
been changed and/or persisted.

It is important to note that the callbacks are all _synchronous_. This means
that a call to `#query()` will block until all operations are completed.

## Exports <a name="exports"></a>

This module exports the `LocalStore` constructor.