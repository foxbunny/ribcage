# <a name="base-form-view">Base form view</a>

This view provides the basic form-handling functionality. It handles the form's
submit method, and provides hooks for validation and error display.

This module is in UMD format and will create `ribcage.views.baseFormView`,
`ribcage.views.BaseFormView`, and `ribcage.viewMixins.BaseFormView` globals if
not used with an AMD loader such as RequireJS.

This module depends on jQuery, DaHelpers, `ribcage.utils.serializeobject`,
`ribcage.utils.deserializeform`, `ribcage.validators.mixins`, and
`ribcage.views.TemplateView`.

 + [`baseFormViewMixin`](#baseformviewmixin)
   - [`#validateOnInput`](#validateoninput)
   - [`#__form`](#form)
   - [`#getForm()`](#getform)
   - [`#getFormData()`](#getformdata)
   - [`#setFormData(data)`](#setformdata-data)
   - [`#validateForm(form)`](#validateform-form)
   - [`#fieldInvalid(input, errors)`](#fieldinvalid-input-errors)
   - [`#validateField(input, name, value, data)`](#validatefield-input-name-value-data)
   - [`#formInvalid(err)`](#forminvalid-err)
   - [`#formValid(form, data)`](#formvalid-form-data)
   - [`#beforeSubmit()`](#beforesubmit)
   - [`#afterSubmit()`](#aftersubmit)
   - [`#events`](#events)
   - [`#submit(e)`](#submit-e)
   - [`#onFieldChange(e)`](#onfieldchange-e)
 + [`BaseFormView`](#baseformview)


## <a name="baseformviewmixin">`baseFormViewMixin`</a>

This mixin implements the [`BaseFormView`](#baseformview) view's API. It mixes
in the `validatingMixin` to provide input validation facilities.

### <a name="validateoninput">`#validateOnInput`</a>

Whether to perform validation immediately on field change. Defaults to `false`.

### <a name="form">`#__form`</a>

Holds cached jQuery selector for the form.

This is an internal implementation detail. Do not rely on presence or internal
usage of this property.

### <a name="getform">`#getForm()`</a>

Returns the form element rendered in this view

### <a name="getformdata">`#getFormData()`</a>

Serializes a form to a JavaScript object and returns the object.

### <a name="setformdata-data">`#setFormData(data)`</a>

Deserializes `data` object into the form.

### <a name="validateform-form">`#validateForm(form)`</a>

Perform validation on the form and return an array containing the error object
and form data.

The error object is expected to map field names to an array of error messages.
A special `__all` key can be used to specify messages that apply to the entire
form.

Internally, this method calls the `#clean()` method, which is part of the
`validatingMixin` mixin and passes it the serialized form data.

### <a name="fieldinvalid-input-errors">`#fieldInvalid(input, errors)`</a>

Called when field fails validation. By default, it inserts error messages next
to fields.

### <a name="validatefield-input-name-value-data">`#validateField(input, name, value, data)`</a>

Validates a single field in a `change` or `input` callback (as the field) value
is updated. It calls the `validatingMixin`'s `#applyValidators()` method, and
then the `#fieldInvalid()` method if field has errors.

### <a name="forminvalid-err">`#formInvalid(err)`</a>

Handles the invalid form submission. By default, it simply renders the form
errors.

### <a name="formvalid-form-data">`#formValid(form, data)`</a>

Handles the valid form submission. Does nothing by default.

You need to overload this method to make this entire view useful.

### <a name="beforesubmit">`#beforeSubmit()`</a>

Called before form is submitted. Has no arguments, and return value is not used
by the view.

### <a name="aftersubmit">`#afterSubmit()`</a>

Called after either [`#formValid()`](#formvalid-data) or
[`#formInvalid()`](#forminvalid-err) have returned.  Has no arguments, and
return value is not used.

This function is called at the end of the [`#submit()`](#submit-e) call. This
is by no means a guarantee that any asynchronous operations in the callback
have finished. For example, if you are doing an AJAX request in
[`#formValid()`](#formvalid-data), this method will likely be invoked well
before the AJAX request has completed.

### <a name="events">`#events`</a>

Event mappings.

### <a name="submit-e">`#submit(e)`</a>

Form submit event handler.

This is an internal implementation detail, and you generally should not
override this.

### <a name="onfieldchange-e">`#onFieldChange(e)`</a>

Form input change event handler.

This is an internal implementation detail, and you generally should not
override this.

## <a name="baseformview">`BaseFormView`</a>

Please see the documentation for the [`baseFormViewMixin`](#baseformviewmixin)
for more information on the API that this view provides.