# <a name="tabbed-view">Tabbed view</a>

This view implements a container view with tabbed navigation. It extends the
`TemplateView` constructor and simplifies rendering of tabbed layout. Each
tab's content is rendered using a separate subview.

The view only handles the activation of the content areas based on tab
navigation interaction, but the actual content interactions are handled by
subviews.

This module is in UMD format and will export `ribcage.views.tabbedView`,
`ribcage.views.TabbedView`, and `ribcage.viewMixins.TabbedView` globals if not
used with an AMD loader such as RequrieJS.

This module depends on `ribcage.views.TemplateView`.

## <a name="tabbedviewmixin">`tabbedViewMixin`</a>

This mixin implements the API for the `TabbedView`. To has a few attributes
that define the HTML for the various moving parts, and renders each subview
into its designated content area

Since this view's job is to handle tabbed navigation and not manage the actual
subviews, you should generally not try to add event handlers to this view, but
instead handle everything in your subviews.

### <a name="main_template">`#MAIN_TEMPLATE`</a>

Main container template. By default it renders a single `<ul>` that will
contain the navigation, and a single `<div>` that will contain the tab
contents.

The tab navigation container must have a class attribute of `tabnav-tabs`, and
the content container element must have a class of `tabnav-container`.

The template must have `TABS` and `TCONTENTS` placeholders.

### <a name="tab_template">`#TAB_TEMPLATE`</a>

Template for a single item in the tab navigation list. By default this is a
`<li>` item.

The template must contain `ID` and `LABEL` placeholders.

The outermost element must also have a class attribute of `tabnav-tab`. The
outermost element must also have an `id` attribute with the value of `ID_tab`,
where `ID` is the placeholder that will be replaced by actual tab id.

### <a name="content_template">`#CONTENT_TEMPLATE`</a>

The template for single tab content container. By default it is a `<div>`
element.

The content container template must have `ID` and `PLACEHOLDER` placeholders.
The `ID` must be rendered as an `id` attribute of the container element.

The container must have a class of `tabnav-content` and must have an `id`
attribute with value of `ID` (which is the placeholder that will be replaced by
the actual content id.

### <a name="tabs">`#tabs`</a>

Array of tab meta data. Each tab meta data item should be an object that looks
like this:

    {
      label: 'My tab',
      id: 'mytab',
      show: function() { /* ... */ },    // optional
    }


The `label` attribute is the tab's label that is used in the navigation
buttons.

The `id` attribute sets the tab's HTML `id` attribute.

The `view` attribute is a view that should be rendered in the tab. The view's
element will be appended to its tab container.

The `show` and `hide` callbacks are triggered each time a tab is shown or
hidden. These callbacks are passed this object. If you wish to include any
extra information that should be available to `show` and `hide` callbacks, you
can add it to this object.

### <a name="views">`#views`</a>

A mapping of views for each tab. The key in the `#views` object should be the
tab ID, and the value should be a view instance (not constructor).

Views are optional. If they are specified, they will be rendered into
designated areas.

### <a name="contentplaceholder">`#contentPlaceholder`</a>

Static HTML to be used as content placeholder. Usually this is some sort of
spinner icon to let users know that something will be loaded into the tab. By
default, this is an empty string.

### <a name="getcontentplaceholder">`#getContentPlaceholder()`</a>

Returns HTML to be used as content placeholder. The default implementation
simply returns the `#contentPlaceholder` property.

### <a name="initialize-settings">`initialize(settings)`</a>

The settings should contain a `views` key which will be assigned to the
`#views` property.

### <a name="template">`#template()`</a>

Renders the tabs and tab content containers (but does not insert any content
into them.

### <a name="afterrender">`#afterRender()`</a>

After rendering the tabs and content containers, caches necessary selectors and
renders any views into their containers.

### <a name="ontabclick">`#onTabClick()`</a>

Tab click handler. Deactivates active tabs and shows the selected tab.

## <a name="tabbedview">`TabbedView`</a>

Please see the documentation on [`tabbedViewMixin`](#tabbedviewmixin) for more
information about this view's API.