# <a name="listview">ListView</a>

This is a generic collection list view. It renders individual models in a list
using a list template and a list item template.

This module is in UMD format and will create `ribcage.views.ListView`,
`ribcage.viewMixins.ListView` and `ribcage.views.listView` globals if not used
with an AMD loader such as RequireJS.

This module depends on Underscore and `ribcage.views.TemplateView`

 + [`listViewMixin`](#listviewmixin)
   - [`#itemTemplateSource`](#itemtemplatesource)


## <a name="listviewmixin">`listViewMixin`</a>

This mixin implements the API for the `ListView` ### `#templateSource`

Default list template. This template is a `<ul>` tag that contains all list
items. ### `#useRawModel`

Whether to use raw model object instead of converting it to JSON. Default is
`false`.

### <a name="itemtemplatesource">`#itemTemplateSource`</a>

The template source for the list item. Each list item is rendered with the item
data as context (see [`#getItemData()`](#getitemdata-model) for more
information on how the context is calculated. ### `#itemTemplate(data)`

This method takes item data and renders the `#itemTemplateSource`, returning a
HTML fragment for the list item. ### `#getModels()`

Returns the model items. By defualt this is `this.collection.models`. ###
`#getItemdata(model)`

Takes a model and returns the data to be used as template context for list item
template. This is either pass-through or conversion of the model to an object
depending on [`#useRawModel`](#userawmodel) setting.

Raw object will be named `item` in the context. Otherwise, model fields will be
added as context variables. ### `#getTemplateContext()`