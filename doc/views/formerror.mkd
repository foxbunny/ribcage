# <a name="form-error-view">Form error view</a>

This view provides the basic error display in your view's forms. It doesn't do
much by itself other than providing methods that perofrm the grunt work of
inserting and clearing error messages. It is generally expected that mixin
would be more useful in conjunction with your views. The view constructor is
provided simply for the sake of consistency with the rest of Ribcage.

This module is in UMD format and will create `ribcage.views.formErrorView`,
`ribcage.views.FormErrorView` and `ribacage.mixins.formErrorView` global if not
used with an AMD loader such as RequireJS.

This module depends on DaHelpers, `ribcage.views.BaseView`.

 + [`formErrorViewMixin`](#formerrorviewmixin)
   - [`#errorClass`](#errorclass)
   - [`#formErrorClass`](#formerrorclass)
   - [`#fieldErrorClass`](#fielderrorclass)
   - [`#inputErrorClass`](#inputerrorclass)
   - [`#errorMessage(data)`](#errormessage-data)
   - [`#clearErrors(form)`](#clearerrors-form)
   - [`#clearFieldErrors(input)`](#clearfielderrors-input)
   - [`#insertErrorMessage(input, [msgs])`](#inserterrormessage-input-msgs)
   - [`#insertFormErrors(form, msgs)`](#insertformerrors-form-msgs)
   - [`#insertErrorMessages(form, err)`](#inserterrormessages-form-err)
 + [`FormErrorView`](#formerrorview)


## <a name="formerrorviewmixin">`formErrorViewMixin`</a>

This mixin implements the API for the [`FormErrorView`](#formerrorview).

The format of the error objects that are passed to this mixin's methods are
expected to follow the Ribcage's validation output.

### <a name="errorclass">`#errorClass`</a>

This is a HTML class added to all form and field errors displayed in the form.

### <a name="formerrorclass">`#formErrorClass`</a>

This is a HTML class that is added to all form errors.

### <a name="fielderrorclass">`#fieldErrorClass`</a>

This is a HTML class added to all field errors.

### <a name="inputerrorclass">`#inputErrorClass`</a>

This is a HTML class added to individual inputs that have errors.

### <a name="errormessage-data">`#errorMessage(data)`</a>

Generates HTML to be inserted as error message. The `data` argument should be
an object with three keys: `id`, `msg`, and `cls`. The `id` and `cls` keys are
optional, and will default to `null` and 'error' respectively. The `msg` key is
optional, too, but will be left `undefined` if you do not provide it, and will
show up as 'undefined' in the final HTML.

The reason we use an object as the argument is to make the method compatible
with compiled Underscore.js templates. Naturally, you can override this method
with an actual template if you prefer. Keep in mind that the default will no
longer be used if you do so, unless you've specified defaults in your template.

### <a name="clearerrors-form">`#clearErrors(form)`</a>

Remove all errors from the `form`. It is assumed that all error messages have a
wrapper element wit the class matching `this.errorClass`.

It also removes the error class from inputs.

### <a name="clearfielderrors-input">`#clearFieldErrors(input)`</a>

Removes all errors that are siblings of a given input. This doesn't work if all
inputs and all errors are siblings. Please be sure to add appropriate structure
to your form.

### <a name="inserterrormessage-input-msgs">`#insertErrorMessage(input, [msgs])`</a>

Insert a list of error messages after the specified input. The `msgs` argument
is optional, and defaults to ['Invalid value']. Otherwise, it should be an
array of error messages for the field.

The `msgs` argument can also be a single string.

### <a name="insertformerrors-form-msgs">`#insertFormErrors(form, msgs)`</a>

Insert a list of error messages after the specified input.

`forms` is required, and should be a valid jQuery selector or object.

`msgs` is required, and should be an array of messages. If it is not an array,
it will be converted to one.

### <a name="inserterrormessages-form-err">`#insertErrorMessages(form, err)`</a>

`forms` is required, and should be a valid jQuery selector or object.

Takes an object with error messages for the given form, and renders them next
to the fields.

The `err` object is expected to map field names to an array of error messages.
A special `__all` key can be used to specify messages that apply to the entire
form.

## <a name="formerrorview">`FormErrorView`</a>

Please see the documentation for the [`formErrorMixin`](#formerrormixin) for
more information on the API that this view provides.