// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var define,
  __slice = [].slice;

define = (function(root) {
  var require,
    _this = this;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep) {
      return (function() {
        switch (dep) {
          case 'ribcage/views/create':
            return root.ribcage.views.createView;
          default:
            return null;
        }
      })() || (function() {
        throw new Error("Unmet dependency " + dep);
      })();
    };
    return function(factory) {
      var module;
      module = factory(require);
      root.ribcage.views.collectionCreateView = module;
      root.ribcage.views.CollectionCreateView = module.View;
      return root.ribcage.viewMixins.CollectionCreateView = module.mixin;
    };
  }
})(this);

define(function(require) {
  var CollectionCreateView, CreateView, collectionCreateViewMixin;
  CreateView = require('ribcage/views/create').View;
  collectionCreateViewMixin = {
    validate: function() {
      var data, err;
      data = this.getFormData();
      err = this.model.prototype.validate(data);
      return [err, data];
    },
    initialize: function(_arg) {
      var _base;
      this.model = _arg.model;
      this.model || (this.model = this.collection.model);
      (_base = this.collection).model || (_base.model = this.model);
      if (!this.model) {
        throw new Error("No model associated with collection or view");
      }
    },
    getModelData: function(data) {
      return data;
    },
    formValid: function(data) {
      var _this = this;
      return this.collection.create(this.getModelData(data), {
        success: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.afterRequest();
          return _this.onSaveSuccess.apply(_this, args);
        },
        error: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.afterRequest();
          return _this.onSaveError.apply(_this, args);
        },
        wait: true,
        validate: false
      });
    },
    inputChange: function(e) {
      return this.onFieldChange(e);
    }
  };
  CollectionCreateView = CreateView.extend(collectionCreateViewMixin);
  return {
    mixin: collectionCreateViewMixin,
    View: CollectionCreateView
  };
});
