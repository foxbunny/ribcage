// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this;

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case 'jquery':
          return _this.$;
        case 'underscore':
          return _this._;
        case './form':
          return _this.ribcage.views.baseFormView;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var module;
    module = _this.ribcage.views.modelFormView = factory(_this.require);
    _this.ribcage.views.ModelFormView = module.View;
    return _this.ribcage.viewMixins.ModelFormView = module.mixin;
  };
}

define(function(require) {
  var $, ModelFormView, baseForm, modelFormViewMixin, _;
  $ = require('jquery');
  _ = require('underscore');
  baseForm = require('./form');
  modelFormViewMixin = {
    validate: function() {
      var err;
      err = this.model.validate(this.model.attributes);
      return [err, this.model.toJSON()];
    },
    events: {
      'submit form': 'submit',
      'change :input': 'inputChange',
      'input :input': 'inputChange'
    },
    inputChange: function(e) {
      this.onFieldChange(e);
      return this.updateModel(e);
    },
    updateModel: function(e) {
      var cleaned, err, input, name, val, _ref;
      input = this.$(e.target);
      val = input.val();
      name = input.attr('name');
      _ref = this.clean({
        name: val
      }), err = _ref[0], cleaned = _ref[1];
      if (err) {
        return;
      }
      this.model.set(input.attr('name'), input.val());
      return true;
    }
  };
  ModelFormView = baseForm.View.extend(modelFormViewMixin);
  return {
    mixin: modelFormViewMixin,
    View: ModelFormView
  };
});
