// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this;

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case 'backbone':
          return _this.Backbone;
        case 'underscore':
          return _this._;
        case './base':
          return _this.ribcage.views.baseView;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var module;
    module = _this.ribcage.views.templateView = factory(_this.require);
    _this.ribcage.views.TemplateView = module.View;
    return _this.ribcage.viewMixins.TemplateView = module.mixin;
  };
}

define(function(require) {
  var Backbone, TemplateView, baseView, templateViewMixin, _;
  Backbone = require('backbone');
  _ = require('underscore');
  baseView = require('./base');
  templateViewMixin = {
    templateSettings: null,
    templateSource: '<p>Please override me</p>',
    template: function(data) {
      return _.template(this.templateSource, data, this.templateSettings);
    },
    getTemplateContext: function() {
      return {};
    },
    beforeRender: function() {
      return this;
    },
    renderTemplate: function(context) {
      return this.template(context);
    },
    insertTemplate: function(html) {
      return this.$el.html(html);
    },
    afterRender: function(context) {
      return this;
    },
    render: function() {
      var context;
      this.beforeRender();
      context = this.getTemplateContext();
      this.insertTemplate(this.renderTemplate(context));
      this.afterRender(context);
      return this;
    }
  };
  TemplateView = baseView.View.extend(templateViewMixin);
  return {
    mixin: templateViewMixin,
    View: TemplateView
  };
});
