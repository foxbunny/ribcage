// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this;

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case 'jquery':
          return _this.$;
        case 'underscore':
          return _this._;
        case 'ribcage/views/base':
          return _this.ribcage.views.baseView;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var module;
    module = _this.ribcage.views.loadingView = factory(_this.require);
    _this.ribcage.views.LoadingView = module.View;
    return _this.ribcage.viewMixins.LoadingView = module.mixin;
  };
}

define(function(require) {
  var $, LoadingView, baseView, loadingMixin, tLoader, _;
  $ = require('jquery');
  _ = require('underscore');
  baseView = require('ribcage/views/base');
  tLoader = _.template("<div class=\"loader-spinner\">\n  <span class=\"loader-icon\">\n    <span class=\"icon-refresh icon-spin icon-2x\"></span>\n  </span>\n  <span class=\"loader-label\">loading</span>\n</div>");
  loadingMixin = {
    fadeTime: 225,
    spinner: null,
    loadingLabel: null,
    initialize: function(_arg) {
      this.spinner = _arg.spinner, this.loadingLabel = _arg.loadingLabel;
    },
    render: function() {
      var label;
      this.$el.append(tLoader);
      if (this.spinner) {
        this.$el.find('.loader-spinner').html(this.spinner);
      }
      if (typeof this.loadingLabel === 'function') {
        label = this.loadingLabel();
      } else {
        label = this.loadingLabel;
      }
      if (label) {
        this.$el.find('.loader-label').text(label);
      }
      this.$el.hide();
      return this;
    },
    showLoader: function() {
      return this.$el.stop().fadeIn(this.fadeTime);
    },
    hideLoader: function() {
      return this.$el.stop().fadeOut(this.fadeTime);
    },
    toggleLoader: function() {
      return this.$el.stop().toggleFade(this.fadeTime);
    }
  };
  LoadingView = baseView.View.extend(loadingMixin);
  return {
    mixin: loadingMixin,
    View: LoadingView
  };
});
