// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this,
  __slice = [].slice;

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case './modelform':
          return _this.ribcage.views.modelForm;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var mixins, module, views, _base, _base1;
    views = (_base = (_this.ribcage || (_this.ribcage = {}))).views || (_base.views = {});
    mixins = (_base1 = _this.ribcage).viewMixins || (_base1.viewMixins = {});
    module = views.createView = factory(_this.require);
    views.CreateView = module.View;
    return mixins.CreateView = module.mixin;
  };
}

define(function(require) {
  var CreateView, createViewMixin, modelForm;
  modelForm = require('./modelform');
  createViewMixin = {
    redirectPath: '#',
    saveErrorMessage: 'The form could not be saved',
    getRedirectPath: function() {
      return this.redirectPath;
    },
    getSaveErrorMessage: function(xhr, status, msg) {
      return this.saveErrorMessage;
    },
    onSaveSuccess: function() {
      return window.location.hash = this.getRedirectPath();
    },
    onSaveError: function(xhr, status, msg) {
      return this.insertErrorMessages({
        __all: [this.getSaveErrorMessage(xhr, status, msg)]
      });
    },
    afterSubmit: function() {
      return this;
    },
    afterRequest: function() {
      return this.enableButtons();
    },
    formInvalid: function(err) {
      this.afterRequest();
      return modelForm.View.prototype.formInvalid.call(this, err);
    },
    formValid: function(data) {
      var _this = this;
      return this.model.save(data, {
        success: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.afterRequest();
          return _this.onSaveSuccess.apply(_this, args);
        },
        error: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.afterRequest();
          return _this.onSaveError.apply(_this, args);
        }
      });
    }
  };
  CreateView = modelForm.View.extend(createViewMixin);
  return {
    mixin: createViewMixin,
    View: CreateView
  };
});
