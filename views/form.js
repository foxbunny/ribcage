// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this;

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case 'jquery':
          return _this.$;
        case 'underscore':
          return _this._;
        case '../utils/searializeobject':
          return _this.ribcage.utils.serializeObject;
        case '../utils/deserializeform':
          return _this.ribcage.utils.deserializeForm;
        case '../validation/mixins':
          return _this.ribcage.validation.mixins;
        case './template':
          return _this.ribcage.views.templateView;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var module;
    module = _this.ribcage.views.baseFormView = factory(_this.require);
    _this.ribcage.views.BaseFormView = module.View;
    return _this.ribcage.viewMixins.BaseFormView = module.mixin;
  };
}

define(function(require) {
  var $, BaseFormView, baseFormViewMixin, deserializeForm, serializeObject, templateView, validationMixins, _;
  $ = require('jquery');
  _ = require('underscore');
  serializeObject = require('../utils/serializeobject');
  deserializeForm = require('../utils/deserializeform');
  validationMixins = require('../validators/mixins');
  templateView = require('./template');
  baseFormViewMixin = _.extend({}, validationMixins.validatingMixin, {
    errorClass: 'error',
    formErrorClass: 'error-form',
    fieldErrorClass: 'error-field',
    inputErrorClass: 'error-input',
    validateOnInput: false,
    __form: null,
    getForm: function() {
      return this.__form || (this.__form = this.$('form'));
    },
    getFormData: function() {
      return serializeObject(this.getForm());
    },
    setFormData: function(data) {
      return deserializeForm(this.getForm(), data);
    },
    validate: function() {
      return this.clean(this.getFormData());
    },
    fieldInvalid: function(input, errors) {
      this.clearFieldErrors(input);
      return this.insertErrorMessage(input, errors);
    },
    validateField: function(input, name, value, data) {
      var errors, _ref;
      _ref = this.applyValidators(name, value), errors = _ref[0], value = _ref[1];
      if (errors.length) {
        return this.fieldInvalid(input, name, value, errors);
      }
    },
    errorMessage: function(_arg) {
      var cls, id, msg, s;
      id = _arg.id, msg = _arg.msg, cls = _arg.cls;
      cls || (cls = 'error');
      s = '<span';
      if (id != null) {
        s += " id=\"" + id + "\"";
      }
      return s + (" class=\"" + cls + "\">" + msg + "</span>");
    },
    clearErrors: function() {
      var form;
      form = this.getForm();
      form.find("." + this.errorClass).remove();
      form.find("." + this.inputErrorClass).removeClass(this.inputErrorClass);
      return form;
    },
    cleanFieldErrors: function(input) {
      input = $(input);
      return input.siblings("." + errorClass).remove();
    },
    insertErrorMessage: function(input, msgs) {
      var msg, _i, _len, _ref, _results;
      if (msgs == null) {
        msgs = ['Invalid value'];
      }
      if (!_.isArray(msgs)) {
        msgs = [msgs];
      }
      input = $(input);
      _ref = msgs.reverse();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        msg = _ref[_i];
        input.after(this.errorMessage({
          msg: msg,
          cls: "" + this.fieldErrorClass + " " + this.errorClass
        }));
        _results.push(input.addClass(this.inputErrorClass));
      }
      return _results;
    },
    insertFormErrors: function(msgs) {
      var form, msg, _i, _len, _ref, _results;
      if (!_.isArray(msgs)) {
        msgs = [msgs];
      }
      form = this.getForm();
      _ref = msgs.reverse();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        msg = _ref[_i];
        _results.push(form.prepend(this.errorMessage({
          msg: msg,
          cls: "" + this.formErrorClass + " " + this.errorClass
        })));
      }
      return _results;
    },
    insertErrorMessages: function(err) {
      var form,
        _this = this;
      form = this.getForm();
      this.clearErrors();
      if (err == null) {
        return;
      }
      if (err.__all) {
        this.insertFormErrors(err.__all);
      }
      form.find(':input').each(function(idx, el) {
        var input, name;
        input = $(el);
        name = input.attr('name');
        if (err[name]) {
          return _this.insertErrorMessage(input, err[name]);
        }
      });
      return this;
    },
    formInvalid: function(err) {
      return this.insertErrorMessages(err);
    },
    formValid: function(data) {},
    disableButtons: function() {
      this.$('button[type=submit]').prop('disabled', true);
      return this.$('input[type=submit]').prop('disabled', true);
    },
    enableButtons: function() {
      this.$('button[type=submit]').prop('disabled', false);
      return this.$('input[type=submit]').prop('disabled', false);
    },
    beforeSubmit: function() {
      return this.disableButtons();
    },
    afterSubmit: function() {
      return this.enableButtons();
    },
    events: {
      'submit form': 'submit',
      'change :input': 'onFieldChange',
      'input :input': 'onFieldChange'
    },
    submit: function(e) {
      var data, err, form, _ref;
      e.preventDefault();
      this.clearErrors();
      this.beforeSubmit();
      form = this.getForm();
      _ref = this.validate(), err = _ref[0], data = _ref[1];
      if (err) {
        this.formInvalid(err, data);
      } else {
        this.formValid(data);
      }
      this.afterSubmit();
      return false;
    },
    onFieldChange: function(e) {
      var formData, input, name, value;
      if (!this.validateOnInput) {
        return true;
      }
      input = this.$(e.target);
      name = input.attr('name');
      value = input.val();
      if (input.attr('type') === 'checkbox') {
        value = input.prop('checked');
      }
      formData = this.getFormData();
      this.validateField(input, name, value, formData);
      return true;
    }
  });
  BaseFormView = templateView.View.extend(baseFormViewMixin);
  return {
    mixin: baseFormViewMixin,
    View: BaseFormView
  };
});
