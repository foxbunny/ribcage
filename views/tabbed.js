// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var define;

define = (function(root) {
  var require,
    _this = this;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep) {
      return (function() {
        switch (dep) {
          case 'ribcage/views/template':
            return root.ribcage.views.templateView;
          default:
            return null;
        }
      })() || (function() {
        throw new Error("Unmet dependency " + dep);
      })();
    };
    return function(factory) {
      var module;
      module = factory(require);
      root.ribcage.views.tabbedView = module;
      root.ribcage.views.TabbedView = module.View;
      return root.ribcage.viewMixins.TabbedView = module.mixin;
    };
  }
})(this);

define(function(require) {
  var TabbedView, TemplateView, tabbedViewMixin;
  TemplateView = require('ribcage/views/template').View;
  tabbedViewMixin = {
    MAIN_TEMPLATE: "<ul class=\"tabnav-tabs\">TABS</ul>\n<div class=\"tabnav-container\">TCONTENTS</div>",
    TAB_TEMPLATE: "<li class=\"tabnav-tab\" id=\"ID_tab\">\n<a href=\"javascript:void(0)\">LABEL</a>\n</li>",
    CONTENT_TEMPLATE: "<div class=\"tabnav-content\" id=\"ID\">\nPLACEHOLDER\n</div>",
    tabs: [],
    views: {},
    contentPlaceholder: '',
    getContentPlaceholder: function() {
      return this.contentPlaceholder;
    },
    initialize: function(settings) {
      if (settings != null ? settings.views : void 0) {
        return this.views = settings.views;
      }
    },
    template: function() {
      var contents, navs, tab;
      navs = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.tabs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tab = _ref[_i];
          _results.push(this.TAB_TEMPLATE.replace(/ID/g, tab.id).replace('LABEL', tab.label));
        }
        return _results;
      }).call(this)).join('');
      contents = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.tabs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tab = _ref[_i];
          _results.push(this.CONTENT_TEMPLATE.replace('ID', tab.id).replace('PLACEHOLDER', this.getContentPlaceholder()));
        }
        return _results;
      }).call(this)).join('');
      return this.MAIN_TEMPLATE.replace('TABS', navs).replace('TCONTENTS', contents);
    },
    afterRender: function() {
      var idx, tab, _i, _len, _ref, _ref1;
      _ref = this.tabs;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        tab = _ref[idx];
        tab.nav = this.$el.find('#' + tab.id + '_tab');
        tab.container = this.$el.find('#' + tab.id);
        if (idx === 0) {
          tab.nav.addClass('active');
          tab.container.show();
        } else {
          tab.nav.removeClass('active');
          tab.container.hide();
        }
        if ((_ref1 = this.view) != null ? _ref1[tab.id] : void 0) {
          this.views[tab.id].render().$el.appendTo(tab.container);
        }
        tab.nav.data('meta', tab);
      }
      this.tabnavContents = this.$('div.tabnav-content');
      this.tabnavTabsLi = this.$('li.tabnav-tab');
      return this.tabnavTabs = this.$('li.tabnav-tab a');
    },
    onTabClick: function(e) {
      var clickTarget, nav, tab;
      this.tabnavTabsLi.removeClass('active');
      this.tabnavContents.hide();
      clickTarget = this.$(e.target);
      if (clickTarget.hasClass('tabnav-tab')) {
        nav = clickTarget;
      } else {
        nav = clickTarget.parents('.tabnav-tab');
      }
      tab = nav.data('meta');
      nav.addClass('active');
      tab.container.show();
      if (typeof tab.show === 'function') {
        return tab.show(tab);
      }
    },
    events: {
      'click .tabnav-tab': 'onTabClick'
    }
  };
  TabbedView = TemplateView.extend(tabbedViewMixin);
  return {
    mixin: tabbedViewMixin,
    View: TabbedView
  };
});
