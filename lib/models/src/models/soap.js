// Generated by CoffeeScript 1.6.1
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this;

if (typeof define !== 'function' || !define.amd) {
  this.require = function(dep) {
    return (function() {
      switch (dep) {
        case 'backbone':
          return _this.Backbone;
        case 'jquery':
          return _this.jQuery;
        case 'underscore':
          return _this._;
        default:
          return null;
      }
    })() || (function() {
      throw new Error("Unmet dependency " + dep);
    })();
  };
  this.define = function(factory) {
    var _base;
    (_base = (_this.ribcage || (_this.ribcage = {}))).models || (_base.models = {});
    return _this.ribcage.models.SoapModel = factory(_this.require);
  };
}

define(function(require) {
  var $, Backbone, SoapModel, _;
  Backbone = require('backbone');
  $ = require('jquery');
  _ = require('underscore');
  require('jquery.soap');
  require('jquery.xml2json');
  return SoapModel = Backbone.Model.extend({
    baseUrl: 'http://example.com',
    namespace: 'http://example.com',
    debug: false,
    appendMethod: false,
    soap12: false,
    soapCreateMethod: 'Create',
    soapReadMethod: 'Read',
    soapUpdateMethod: 'Update',
    soapDeleteMethod: 'Delete',
    getSoapCreateMethod: function() {
      return this.soapCreateMethod;
    },
    getSoapReadMethod: function() {
      return this.soapReadMethod;
    },
    getSoapUpdateMethod: function() {
      return this.soapUpdateMethod;
    },
    getSoapDeleteMethod: function() {
      return this.soapDeleteMethod;
    },
    soapCreateTemplate: null,
    soapReadTemplate: null,
    soapUpdateTemplate: null,
    soapDeleteTemplate: null,
    soapCreate: function(model) {
      if (model == null) {
        model = null;
      }
      return {
        method: this.getSoapCreateMethod(),
        params: this.soapCreateTemplate((model || this).toJSON())
      };
    },
    soapRead: function(model) {
      if (model == null) {
        model = null;
      }
      return {
        method: this.getSoapReadMethod(),
        params: this.soapReadTemplate((model || this).toJSON())
      };
    },
    soapUpdate: function(model) {
      if (model == null) {
        model = null;
      }
      return {
        method: this.getSoapUpdateMethod(),
        params: this.soapUpdateTemplate((model || this).toJSON())
      };
    },
    soapDelete: function(model) {
      if (model == null) {
        model = null;
      }
      return {
        method: this.getSoapDeleteMethod(),
        params: this.soapDeleteTemplate((model || this).toJSON())
      };
    },
    getUrl: function(method, action) {
      return this.baseUrl;
    },
    getSoapActionName: function(method, soapMethod) {
      return "" + this.namespace + soapMethod;
    },
    sync: function(method, model, options) {
      var capMethod, fn, params;
      if (options == null) {
        options = {};
      }
      capMethod = "" + (method[0].toUpperCase()) + (method.slice(1));
      options.crudMethod = capMethod;
      fn = this["soap" + capMethod];
      params = fn.call(this, model);
      return $.soap(_.extend(params, options, {
        enableLogging: this.debug,
        url: this.getUrl(method, params.method),
        appendMethodToURL: this.appendMethod,
        namespaceURL: this.namespace,
        SOAPAction: this.getSoapActionName(method, params.method),
        soap12: this.soap12
      }));
    },
    convertCreateResponse: function(json) {
      throw new Error('convertCreateResponse method is not implemented');
    },
    convertReadResponse: function(json) {
      throw new Error('convertReadResponse method is not implemented');
    },
    convertUpdateResponse: function(json) {
      throw new Error('convertUpdateResponse method is not implemented');
    },
    convertDeleteResponse: function(json) {
      throw new Error('convertDeleteResponse method is not implemented');
    },
    convertResponse: function(json, options) {
      return this["convert" + options.crudMethod + "Response"](json);
    },
    parse: function(response, options) {
      return this.convertResponse(response.toJSON().Body, options);
    }
  });
});
