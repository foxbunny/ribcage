// Generated by LiveScript 1.2.0
/**
 * @author Branko Vukelic <branko@brankovukelic.com>
 * @license MIT
 */
var define;
define = function(root){
  var require;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep){
      return function(){
        switch (dep) {
        case 'backbone':
          return root.Backbone;
        default:
          return null;
        }
      }() || (function(){
        throw new Error("Unmet dependency " + dep);
      }());
    };
    return function(factory){
      var module, r;
      module = factory(require);
      r = root.ribcage || (root.ribcage = {});
      (r.models || (r.models = {})).baseModel = module;
      r.models.BaseModel = module.Model;
      return (r.modelMixins || (r.modelMixins = {})).BaseModel = module.mixin;
    };
  }
}(this);
define(function(require){
  var Model, BaseModelMixin, BaseModel;
  Model = require('backbone').Model;
  return {
    mixin: BaseModelMixin = {
      expose: function(attr){
        return Object.defineProperty(this, attr, {
          get: function(){
            return this.get(attr);
          },
          set: function(v){
            return this.set(attr, v);
          }
        });
      },
      exposeReadOnly: function(attr){
        return Object.defineProperty(this, attr, {
          get: function(){
            return this.get(attr);
          },
          set: function(){
            throw new Error("Attribute " + attr + " cannot be set.");
          }
        });
      },
      cleanup: function(){
        var keys, i$, len$, k;
        this.stopListening();
        this.off();
        keys = ['collection', 'attributes', 'changed', '_events', '_previousAttributes'];
        for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
          k = keys[i$];
          delete this[k];
        }
        return typeof Object.freeze === 'function' ? Object.freeze(this) : void 8;
      }
    },
    Model: BaseModel = (function(superclass){
      var prototype = extend$((import$(BaseModel, superclass).displayName = 'BaseModel', BaseModel), superclass).prototype, constructor = BaseModel;
      importAll$(prototype, arguments[1]);
      function BaseModel(){
        BaseModel.superclass.apply(this, arguments);
      }
      return BaseModel;
    }(Model, BaseModelMixin))
  };
});
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}