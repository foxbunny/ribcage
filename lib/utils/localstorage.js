// Generated by LiveScript 1.2.0
/**
 * @author Branko Vukelic <branko@brankovukelic.com>
 * @license MIT
 */
var define;
define = function(root){
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    return function(factory){
      var module, ref$;
      module = factory();
      return ((ref$ = root.ribcage || (root.ribcage = {})).utils || (ref$.utils = {})).LocalStorage = module;
    };
  }
}(this);
define(function(){
  var store, LocalStorage;
  store = {};
  return LocalStorage = (function(){
    LocalStorage.displayName = 'LocalStorage';
    var prototype = LocalStorage.prototype, constructor = LocalStorage;
    function LocalStorage(){
      this.hasNative = window.localStorage != null;
      if (this.hasNative) {
        this.localStorage = window.localStorage;
      } else {
        this.localStorage = constructor.memoryStorage();
      }
    }
    LocalStorage.memoryStorage = function(){
      return {
        getItem: function(key){
          return store[key];
        },
        setItem: function(key, value){
          return store[key] = value;
        },
        removeItem: function(key){
          var ref$;
          return ref$ = store[key], delete store[key], ref$;
        },
        clear: function(){
          var key, ref$, results$ = [];
          for (key in store) {
            results$.push((ref$ = store[key], delete store[key], ref$));
          }
          return results$;
        }
      };
    };
    prototype.getItem = function(key, raw){
      var val, e;
      raw == null && (raw = false);
      val = this.localStorage.getItem(key);
      if (raw) {
        return val;
      }
      try {
        return JSON.parse(val);
      } catch (e$) {
        e = e$;
        return null;
      }
    };
    prototype.setItem = function(key, val, raw){
      raw == null && (raw = false);
      val = raw
        ? val
        : JSON.stringify(val);
      return this.localStorage.setItem(key, val);
    };
    prototype.removeItem = function(key){
      this.localStorage.removeItem(key);
      return true;
    };
    return LocalStorage;
  }());
});