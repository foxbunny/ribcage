// Generated by LiveScript 1.2.0
/**
 * @author Branko Vukelic <branko@brankovukelic.com>
 * @license MIT
 */
var define;
define = function(root){
  var require;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep){
      return function(){
        switch (dep) {
        case 'backbone':
          return root.Backbone;
        default:
          return null;
        }
      }() || (function(){
        throw new Error("Unmet dependency " + dep);
      }());
    };
    return function(factory){
      var module, r;
      module = factory(require);
      r = root.ribcage || (root.ribcage = {});
      (r.collections || (r.collections = {})).baseCollection = module;
      r.collections.BaseCollection = module.Collection;
      return (r.collectionMixins || (r.collectionMixins = {})).BaseCollection = module.mixin;
    };
  }
}(this);
define(function(require){
  var Collection, BaseCollectionMixin, BaseCollection;
  Collection = require('backbone').Collection;
  return {
    mixin: BaseCollectionMixin = {
      cleanup: function(){
        var i$, ref$, len$, k;
        this.reset([], {
          silent: true
        });
        this.stopListening();
        this.off();
        for (i$ = 0, len$ = (ref$ = ['model', 'models']).length; i$ < len$; ++i$) {
          k = ref$[i$];
          delete this[k];
        }
        return typeof Object.freeze === 'function' ? Object.freeze(this) : void 8;
      }
    },
    Collection: BaseCollection = (function(superclass){
      var prototype = extend$((import$(BaseCollection, superclass).displayName = 'BaseCollection', BaseCollection), superclass).prototype, constructor = BaseCollection;
      importAll$(prototype, arguments[1]);
      function BaseCollection(){
        BaseCollection.superclass.apply(this, arguments);
      }
      return BaseCollection;
    }(Collection, BaseCollectionMixin))
  };
});
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}