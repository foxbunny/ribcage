// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var define;

define = (function(root) {
  var require,
    _this = this;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep) {
      return (function() {
        switch (dep) {
          case 'dahelpers':
            return root.dahelpers;
          case 'ua-parser-js':
            return root.UAParser;
          case './base':
            return root.ribcage.baseRouter;
          default:
            return null;
        }
      })() || (function() {
        throw new Error("Unmet dependency " + dep);
      })();
    };
    return function(factory) {
      var module, r;
      module = factory(require);
      r = ribcage.routers;
      r.routers.deviceRouter = module;
      r.routers.deviceRouter = module.Router;
      return r.routerMixins.DeviceRouter = module.mixin;
    };
  }
})(this);

define(function(require) {
  var BaseRouter, DeviceRouter, UAParser, deviceRouterMixin, extend, subset, type, uaParser, _ref;
  _ref = require('dahelpers'), type = _ref.type, subset = _ref.subset, extend = _ref.extend;
  UAParser = require('ua-parser-js');
  BaseRouter = require('./base').Router;
  uaParser = new UAParser();
  deviceRouterMixin = {
    userAgent: {},
    deviceOverrides: {},
    remapOverrides: function(overrides, actualState) {
      var alternative, alternatives, cond, matcher, method;
      for (method in overrides) {
        alternatives = overrides[method];
        for (alternative in alternatives) {
          matcher = alternatives[alternative];
          if (type(matcher, 'function')) {
            cond = matcher(actualState);
          } else {
            cond = subset(matcher, actualState);
          }
          if (cond) {
            this[method] = this[alternative];
          }
          break;
        }
      }
      return this;
    },
    initialize: function() {
      var _this = this;
      this.userAgent = uaParser.getResult();
      this.userAgent["native"] = false;
      this.userAgent.standalone = false;
      document.addEventListener("deviceready", function() {
        return _this.userAgent["native"] = true;
      });
      if ('standalone' in window.navigator) {
        this.userAgent.standalone = window.navigator.standalone;
      }
      this.remapOverrides(this.deviceOverrides, this.userAgent);
    }
  };
  DeviceRouter = BaseRouter.extend(extend({}, deviceRouterMixin, {
    initialize: function() {
      deviceRouterMixin.initialize.apply(this, arguments);
      return BaseRouter.prototype.initialize.apply(this, arguments);
    }
  }));
  return {
    mixin: deviceRouterMixin,
    Router: DeviceRouter
  };
});
