// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var define,
  __slice = [].slice;

define = (function(root) {
  var require,
    _this = this;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep) {
      return (function() {
        switch (dep) {
          case 'dahelpers':
            return root.dahelpers;
          case 'backbone':
            return root.Backbone;
          default:
            return null;
        }
      })() || (function() {
        throw new Error("Unmet dependency " + dep);
      })();
    };
    return function(factory) {
      var module;
      module = factory(require);
      root.ribcage.routers.baseRouter = module;
      root.ribcage.routers.BaesRouter = module.Router;
      return root.ribcage.routerMixins.BaseRouter = module.mixin;
    };
  }
})(this);

define(function(require) {
  var BaseRouter, Router, baseRouterMixin, type;
  type = require('dahelpers').type;
  Router = require('backbone').Router;
  baseRouterMixin = {
    _activeViews: [],
    autoCleanup: false,
    init: function() {},
    initialize: function(settings) {
      var route, routeName, _ref,
        _this = this;
      if ((settings != null ? settings.autoCleanup : void 0) != null) {
        this.autoCleanup = autoCleanup;
      }
      if (this.autoCleanup) {
        this.on('beforeRoute', function() {
          return _this.cleanup();
        });
      }
      if (this.routing) {
        _ref = this.routing;
        for (routeName in _ref) {
          route = _ref[routeName];
          this.route(route.re, routeName, route.fn);
        }
      }
      return this.init(Backbone.$);
    },
    reverse: function() {
      var c, components, i, param, params, re, results, route, _i, _len;
      route = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      re = this.routing[route].re;
      re = ('' + re).slice(1, -1);
      components = re.split(/\([^)]\)/);
      components = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = components.length; _i < _len; _i++) {
          c = components[_i];
          _results.push(c.replace(/\\\//g, '/'));
        }
        return _results;
      })();
      results = components[0];
      for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
        param = params[i];
        results += "" + param + components[i + 1];
      }
      return results.replace(/\$/g, '').replace(/\^/, '');
    },
    beforeRoute: function(router, name) {},
    route: function(route, name, callback) {
      var wrapped,
        _this = this;
      if (arguments.length === 2) {
        callback = name;
        name = '';
      }
      wrapped = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _this.beforeRoute(_this, name);
        _this.trigger('beforeRoute', _this, name);
        return callback.apply(_this, args);
      };
      return Router.prototype.route.call(this, route, name, wrapped);
    },
    giveAccess: function(view) {
      return view.router = this;
    },
    register: function(view) {
      this._activeViews.push(view);
      this.giveAccess(view);
      return view;
    },
    cleanup: function() {
      var model, view, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this._activeViews;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        if (view.cleanup != null) {
          view.cleanup();
        }
        if (view.model && type(view.model.off, 'function')) {
          view.model.off();
        }
        view.model = null;
        if (view.collection) {
          _ref1 = view.collection.models;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            model = _ref1[_j];
            if (type(model.off, 'function')) {
              model.off();
            }
          }
          if (type(view.collection.off, 'function')) {
            view.collection.off();
          }
          view.collection.reset();
          view.collection = null;
        }
        view.off();
        view.stopListening();
        view.remove();
      }
      this._activeViews = [];
      return this;
    },
    go: function(hash) {
      return this.navigate(hash, {
        trigger: true
      });
    },
    back: function() {
      var _ref;
      return (_ref = window.history) != null ? _ref.back() : void 0;
    },
    swapPath: function(hash) {
      return this.navigate(hash, {
        trigger: true,
        replace: true
      });
    },
    back: function() {
      return window.history.back();
    },
    start: function() {
      var _ref;
      return (_ref = Backbone.history).start.apply(_ref, arguments);
    }
  };
  BaseRouter = Router.extend(baseRouterMixin);
  return {
    mixin: baseRouterMixin,
    Router: BaseRouter
  };
});
