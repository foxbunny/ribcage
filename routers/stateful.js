// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var define;

define = (function(root) {
  var require,
    _this = this;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep) {
      return (function() {
        switch (dep) {
          case 'dahelpers':
            return root.dahelpers;
          case './base':
            return root.ribcage.routers.baseRouter;
          case '../models/localstorage':
            return root.ribcage.models.localStorageModel;
          default:
            return null;
        }
      })() || (function() {
        throw new Error("Unmet dependency " + dep);
      })();
    };
    return function(factory) {
      var module;
      module = factory(require);
      root.ribcage.routers.statefulRouter = module;
      root.ribcage.routers.StatefulRouter = module.Router;
      return root.ribcage.routerMixins.StatefulRouter = module.mixin;
    };
  }
})(this);

define(function(require) {
  var BaseRouter, LocalStorageModel, StatefulRouter, extend, statefulRouterMixin;
  extend = require('dahelpers').extend;
  BaseRouter = require('./base').Router;
  LocalStorageModel = require('../models/localstorage').Model;
  statefulRouterMixin = {
    defaultState: {
      started: false
    },
    stateStorageKey: 'appState',
    stateModel: LocalStorageModel,
    getStateModel: function() {
      return this.stateModel;
    },
    stateId: 'state',
    getStateId: function() {
      return this.stateId;
    },
    initState: function(data) {
      var Model, State, state,
        _this = this;
      if (data == null) {
        data = {};
      }
      if (this.stateStorageKey == null) {
        throw new Error("The state storage key cannot be undefined or null.");
      }
      Model = this.getStateModel();
      State = Model.extend({
        storageKey: this.stateStorageKey,
        defaults: extend({}, this.defaultState, data)
      });
      state = new State({
        id: this.getStateId()
      });
      state.save(null, {
        forceCreate: true
      });
      state.on('change', function() {
        return _this.state.save();
      });
      return state;
    },
    initialize: function() {
      return this.state = this.initState();
    },
    start: function() {
      this.state.set({
        started: true
      });
      return BaseRouter.prototype.start.call(this);
    }
  };
  StatefulRouter = BaseRouter.extend(extend({}, statefulRouterMixin, {
    initialize: function() {
      statefulRouterMixin.initialize.apply(this, arguments);
      return BaseRouter.prototype.initialize.apply(this, arguments);
    }
  }));
  return {
    mixin: statefulRouterMixin,
    Router: StatefulRouter
  };
});
