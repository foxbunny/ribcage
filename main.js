// Generated by CoffeeScript 1.6.3
/*!
@author Branko Vukelic <branko@brankovukelic.com>
@license MIT
*/

var _this = this;

if (typeof define !== 'function' || !define.amd) {
  this.define = function(factory) {
    var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9;
    _this.ribcage || (_this.ribcage = {});
    (_base = _this.ribcage).models || (_base.models = {});
    (_base1 = _this.ribcage).collections || (_base1.collections = {});
    (_base2 = _this.ribcage).views || (_base2.views = {});
    (_base3 = _this.ribcage).routers || (_base3.routers = {});
    (_base4 = _this.ribcage).modelMixins || (_base4.modelMixins = {});
    (_base5 = _this.ribcage).collectionMixins || (_base5.collectionMixins = {});
    (_base6 = _this.ribcage).viewMixins || (_base6.viewMixins = {});
    (_base7 = _this.ribcage).routerMixins || (_base7.routerMixins = {});
    (_base8 = _this.ribcage).validators || (_base8.validators = {});
    return (_base9 = _this.ribcage).utils || (_base9.utils = {});
  };
}

define(function(require) {
  var LocalStorage, LocalStore, baseCollection, baseFormView, baseModel, baseRouter, baseView, collectionCreateView, createView, deserializeForm, deviceRouter, formErrorView, formExtraView, loadingView, localStorageModel, methods, mixins, modalView, modelFormView, modelView, randString, redirectView, serializeObject, statefulRouter, tabbedView, templateBaseView, templateView;
  baseModel = require('./models/base');
  localStorageModel = require('./models/localstorage');
  baseCollection = require('./collections/base');
  baseView = require('./views/base');
  formErrorView = require('./views/formerror');
  formExtraView = require('./views/formextra');
  baseFormView = require('./views/form');
  modelFormView = require('./views/modelform');
  createView = require('./views/create');
  collectionCreateView = require('./views/collectioncreate');
  templateBaseView = require('./views/templatebase');
  templateView = require('./views/template');
  modalView = require('./views/modal');
  modelView = require('./views/model');
  redirectView = require('./views/redirect');
  loadingView = require('./views/loading');
  tabbedView = require('./views/tabbed');
  baseRouter = require('./routers/base');
  statefulRouter = require('./routers/stateful');
  deviceRouter = require('./routers/device');
  methods = require('./validators/methods');
  mixins = require('./validators/mixins');
  serializeObject = require('./utils/serializeobject');
  deserializeForm = require('./utils/deserializeform');
  randString = require('./utils/randstring');
  LocalStorage = require('./utils/localstorage');
  LocalStore = require('./utils/localstore');
  return {
    models: {
      BaseModel: baseModel.Model,
      LocalStorageModel: localStorageModel.Model
    },
    collections: {
      BaseCollection: baseCollection.Collection
    },
    views: {
      BaseView: baseView.View,
      FormError: formErrorView.View,
      FormExtraView: formExtraView.View,
      BaseFormView: baseFormView.View,
      ModelFormView: modelFormView.View,
      CreateView: createView.View,
      CollectionCreateView: collectionCreateView.View,
      TemplateBaseView: templateBaseView.View,
      TemplateView: templateView.View,
      ModalView: modalView.View,
      ModelView: modelView.View,
      RedirectView: redirectView.View,
      LoadingView: loadingView.View,
      TabbedView: tabbedView.View
    },
    routers: {
      BaseRouter: baseRouter.Router,
      StatefulRouter: statefulRouter.Router,
      DeviceRouter: deviceRouter.Router
    },
    modelMixins: {
      BaseModel: baseModel.mixin,
      LocalStorageModel: localStorageModel.mixin
    },
    collectionMixins: {
      BaseCollection: baseCollection.Collection
    },
    viewMixins: {
      BaseView: baseView.mixin,
      FormErrorView: formErrorView.mixin,
      FormExtraView: formExtraView.mixin,
      BaseFormView: baseFormView.mixin,
      ModelFormView: modelFormView.mixin,
      CreateView: createView.mixin,
      CollectionCreateView: collectionCreateView.mixin,
      TemplateBase: templateBaseView.mixin,
      TemplateView: templateView.mixin,
      ModalView: modalView.mixin,
      ModelView: modelView.mixin,
      RedirectView: redirectView.mixin,
      LoadingView: loadingView.mixin,
      TabbedView: tabbedView.mixin
    },
    routerMixins: {
      BaseRouter: baseRouter.mixin,
      StatefulRouter: statefulRouter.mixin,
      DeviceRouter: deviceRouter.mixin
    },
    validators: {
      methods: methods,
      ValidatingMixin: mixins.validatingMixin,
      ModelValidatingMixin: mixins.modelValidatingMixin
    },
    utils: {
      serializeObject: serializeObject,
      deserializeForm: deserializeForm,
      randString: randString,
      LocalStorage: LocalStorage,
      LocalStore: LocalStore
    }
  };
});
